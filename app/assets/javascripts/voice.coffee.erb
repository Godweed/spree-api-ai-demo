class SpreeVoice
  constructor: ->
    @recognition = new webkitSpeechRecognition()
    @apiAiClient = new ApiAi()
    @speechKITT = window.SpeechKITT

  # Initialize and configure Web Speech, SpeechKITT, and Api.ai
  init: ->
    @_configureApiAi()
    @_configureWebSpeech()
    @_displaySpeechKITT()

  # Configure SpeechKITT
  _configureSpeechKITT: ->
    @speechKITT.setStartCommand => @recognition.start()
    @speechKITT.setAbortCommand => @recognition.abort()
    @speechKITT.setStylesheet('//cdnjs.cloudflare.com/ajax/libs/SpeechKITT/0.3.0/themes/flat-midnight-blue.css');
    @speechKITT.setSampleCommands ['Show me completed orders', 'Display orders placed before last Thursday']

  # Configure Web Speech API
  _configureWebSpeech: ->
    @recognition.addEventListener 'start', @speechKITT.onStart
    @recognition.addEventListener 'end', @speechKITT.onEnd
    @recognition.addEventListener 'result', @_handleRecognitionResult

  # Configure the Api.ai client
  _configureApiAi: ->
    @apiAiClient.server = 'wss://api.api.ai:4435/api/ws/query'
    @apiAiClient.token = '<%= ENV['API_AI_CLIENT_ACCESS_TOKEN'] %>';

    # Once socket is opened, configure SpeechKITT
    @apiAiClient.onOpen = =>
      @_configureSpeechKITT()
    @apiAiClient.onInit = =>
      @apiAiClient.open()

    # Add a handler for query results
    @apiAiClient.onResults = @_handleApiAiResult

    # Initialize Api.ai client
    @apiAiClient.init()

  # Display the SpeechKITT UI
  _displaySpeechKITT: ->
    SpeechKITT.render()
    $speechKITToggle = $('#skitt-ui');
    $speechKITToggle.show()

  # Handle the recognized speech
  _handleRecognitionResult: (event) =>
    transcript = event.results[0][0].transcript
    console.log 'recognized speech:', transcript

    @_queryApiAi transcript

  # Send a text query to Api.ai
  _queryApiAi: (speech) ->
    @apiAiClient.sendJson
      query: speech
      sessionId: 'session'
      lang: 'EN'

  # Handle Api.ai query results and call the appropriate function based on user intent
  _handleApiAiResult: (queryResult) =>
    console.log 'Api.ai result', queryResult

    action = queryResult.result.action
    parameters = queryResult.result.parameters

    switch action
      when 'filterOrders'
        @_filterOrders parameters.orderStatus

  # Redirect to a view of the orders filtered by status
  _filterOrders: (orderStatus) ->
    console.log 'filterOrders'

    urlParams = 'utf8=âœ“&q[created_at_gt]=&q[created_at_lt]=&q[number_cont]=&q' +
        "[state_eq]=#{orderStatus}&q[payment_state_eq]=&q[shipment_state_eq]=" +
        '&q[bill_address_firstname_start]=&q[bill_address_lastname_start]=' +
        '&q[email_cont]=&q[line_items_variant_id_in]=&q[promotions_id_in]=' +
        '&q[completed_at_not_null]=0&q[completed_at_not_null]=' +
        '1&q[considered_risky_eq]=&per_page=15'

    window.location = '/admin/orders?' + encodeURI(urlParams)

$ ->
  voice = new SpreeVoice()
  voice.init()












